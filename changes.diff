diff --git a/README.md b/README.md
index 2eefd74..11e512e 100644
--- a/README.md
+++ b/README.md
@@ -9 +9 @@ This project uses LLMs to summarize Git changes and assist in code reviews.
-- Python 3.8 or higher
+- Python 3.9 or higher
@@ -20 +20 @@ git clone http://lu-plm-actualitas.csir.co.za/software-sig/code-reviewer.git
-2. Install the required Python packages:
+2. Install the required Python packages (in a conda env or virtual env):
@@ -36 +36 @@ GOOGLE_API_KEY=your_google_api_key
-Run the `main.py` script to generate the code review process. You must describe the problem in quotation marks. Optionally you can include a file containing the code to be reviewed. Here are examples
+Run the `main.py` script to generate the code review process. You must describe the problem in quotation marks. Optionally you can include a file containing the code to be reviewed. The default specialization of the reviewer is python, you at the moment, you can specify the specialization with this flag `--specialization=python` (`javascript`, `cpp` or `typescript`). Here are some examples of the usage:
@@ -39 +39 @@ Run the `main.py` script to generate the code review process. You must describe
-python src/main.py "How do I create a simple publisher node in ROS2 using Python?"
+python src/main.py "How do I create a simple publisher node in ROS2?"
@@ -51,0 +52 @@ export CODE_REVIEWER_PATH="{path_to_main.py}/main.py"
+export DEFAULT_SPECIALIZATION="python"  # Set your default specialization her
@@ -70,0 +72,17 @@ python src/mr-summarizer.py
+You can also add these lines to the `.bashrc` file:
+
+```sh
+export MR_SUMMARIZER_PATH="$HOME/ma-code-reviewer/src/mr-summarizer.py"
+alias mrs="python \$MR_SUMMARIZER_PATH"
+```
+
+After updating the `.bashrc` file, make sure to source it to apply the changes:
+
+```sh
+source ~/.bashrc
+```
+
+You just need to be in a git repository and run `mrs` in the terminal.
+
+**N.B:** These commands do not work inside docker containers. They would need to be echoed in someway.
+
diff --git a/src/main.py b/src/main.py
index b131ffd..df124c3 100644
--- a/src/main.py
+++ b/src/main.py
@@ -2 +2 @@ import argparse
-from typing import Dict, TypedDict, Optional
+from typing import TypedDict, Optional
@@ -4,2 +3,0 @@ from langgraph.graph import StateGraph, END
-import random
-import time
@@ -8,0 +7 @@ import logger_setup
+from prompts import prompts
@@ -41,18 +39,0 @@ workflow = StateGraph(GraphState)
-reviewer_start = "You are Code reviewer specialized in {}.\
-You need to review the given code following PEP8 guidelines and potential bugs\
-and point out issues as bullet list.\
-Code:\n {}"
-
-coder_start = "You are a Coder specialized in {}.\
-Improve the given code given the following guidelines. Guideline:\n {} \n \
-Code:\n {} \n \
-Output just the improved code and nothing else."
-
-rating_start = "Rate the skills of the coder on a scale of 10 given the Code review cycle with a short reason.\
-Code review:\n {} \n "
-
-code_comparison = "Compare the two code snippets and rate on a scale of 10 to both. Don't output the codes. Revised Code: \n {} \n Actual Code: \n {}"
-
-classify_feedback = "Are all feedback mentioned resolved in the code? Output just Yes or No.\
-Code: \n {} \n Feedback: \n {} \n"
-
@@ -68 +49 @@ def handle_reviewer(state):
-    feedback = llm(reviewer_start.format(specialization, code))
+    feedback = llm(prompts[specialization]["reviewer_start"].format(code))
@@ -85 +66 @@ def handle_coder(state):
-    code = llm(coder_start.format(specialization, feedback, code))
+    code = llm(prompts[specialization]["coder_start"].format(feedback, code))
@@ -95 +76,2 @@ def handle_result(state):
-    rating = llm(rating_start.format(history))
+    specialization = state.get("specialization", "").strip()
+    rating = llm(prompts[specialization]["rating_start"].format(history))
@@ -97 +79 @@ def handle_result(state):
-    code_compare = llm(code_comparison.format(code1, code2))
+    code_compare = llm(prompts[specialization]["code_comparison"].format(code1, code2))
@@ -106,0 +89 @@ def deployment_ready(state):
+    specialization = state.get("specialization", "").strip()
@@ -110 +93,5 @@ def deployment_ready(state):
-        in llm(classify_feedback.format(state.get("code"), state.get("feedback")))
+        in llm(
+            prompts[specialization]["classify_feedback"].format(
+                state.get("code"), state.get("feedback")
+            )
+        )
@@ -138,0 +126,9 @@ def main():
+    parser.add_argument(
+        "--specialization",
+        type=str,
+        choices=["python", "typescript", "javascript", "cpp"],
+        default=os.getenv(
+            "DEFAULT_SPECIALIZATION", "python"
+        ),  # Use environment variable if set
+        help="Specialization of the reviewer.",
+    )
@@ -142 +138 @@ def main():
-    specialization = "python"
+    specialization = args.specialization
@@ -170,3 +166,3 @@ def main():
-    print("History:\n", conversation["history"])
-    print("Code Comparison:\n", conversation["code_compare"])
-    print("Feedback:\n", conversation.get("feedback"))
+    # print("History:\n", conversation["history"])
+    # print("Code Comparison:\n", conversation["code_compare"])
+    # print("Feedback:\n", conversation.get("feedback"))
diff --git a/src/mr-summarizer.py b/src/mr-summarizer.py
index 47beb41..4329f2f 100644
--- a/src/mr-summarizer.py
+++ b/src/mr-summarizer.py
@@ -21,5 +20,0 @@ model = ChatGoogleGenerativeAI(model="gemini-pro", google_api_key=GOOGLE_API_KEY
-# style = """American English  \
-#          formal  \
-#          in bullet points \
-#          """
-
@@ -28,3 +23,9 @@ class Style(BaseModel):
-    language: Optional[str]
-    formality: Optional[str]
-    bullet_points: Optional[bool]
+    language: Optional[str] = "English"
+    formality: Optional[str] = "Professional"
+    bullet_points: Optional[bool] = True
+    tone: Optional[str] = "Neutral"
+    detail_level: Optional[str] = "Detailed"
+    audience: Optional[str] = "Technical team"
+    structure: Optional[str] = "Big picture, Detailed changes"
+    emphasis: Optional[str] = "New features, bug fixes"
+    length: Optional[str] = "Medium"
@@ -36,2 +37,32 @@ parser = PydanticOutputParser(pydantic_object=Style)
-# def llm(x):
-#     return model.invoke(x).content
+def check_git_repo():
+    try:
+        subprocess.run(
+            ["git", "rev-parse", "--is-inside-work-tree"],
+            check=True,
+            stdout=subprocess.PIPE,
+            stderr=subprocess.PIPE,
+        )
+    except subprocess.CalledProcessError:
+        print("Error: This is not a git repository.")
+        exit(1)
+
+
+def extract_git_changes():
+    try:
+        subprocess.run(
+            ["git", "diff", "HEAD~1", "HEAD", "-U0"],
+            check=True,
+            stdout=open("changes.diff", "w"),
+        )
+    except subprocess.CalledProcessError as e:
+        print("Error extracting git changes:", e)
+        exit(1)
+
+
+def read_git_changes():
+    try:
+        with open("changes.diff", "r") as file:
+            return file.read()
+    except FileNotFoundError:
+        print("Error: 'changes.diff' file not found.")
+        exit(1)
@@ -41,3 +72,19 @@ def main():
-    # 1: Extract Git Changes
-    subprocess.run(
-        ["git", "diff", "HEAD~1", "HEAD", "-U0"], stdout=open("changes.diff", "w")
+    check_git_repo()
+    extract_git_changes()
+    git_changes = read_git_changes()
+
+    style = Style()
+    format_instructions = parser.get_format_instructions(style)
+
+    template = (
+        f"Summarize the following git changes for my colleagues since the last merge request:\n\n{git_changes}\n\n"
+        f"Language: {style.language}\n"
+        f"Formality: {style.formality}\n"
+        f"Bullet Points: {style.bullet_points}\n"
+        f"Tone: {style.tone}\n"
+        f"Detail Level: {style.detail_level}\n"
+        f"Audience: {style.audience}\n"
+        f"Structure: {style.structure}\n"
+        f"Emphasis: {style.emphasis}\n"
+        f"Length: {style.length}\n\n"
+        f"{format_instructions}"
@@ -46,9 +92,0 @@ def main():
-    # 2: Read the Git Changes
-    with open("changes.diff", "r") as file:
-        git_changes = file.read()
-
-    # 3: Summarize Using an LLM
-    # prompt = f"Summarize the following git changes for my colleagues since the last merge request:\n\n{git_changes} into a style that is {style}"
-
-    template = f"Summarize the following git changes for my colleagues since the last merge request:\n\n{git_changes}"
-
@@ -58 +96 @@ def main():
-        partial_variables={"format_instructions": parser.get_format_instructions()},
+        partial_variables={"format_instructions": format_instructions},
@@ -61,2 +98,0 @@ def main():
-    # response = llm(prompt)
-
@@ -64 +100 @@ def main():
-    response = prompt_and_model.invoke({"git changes": git_changes})
+    response = prompt_and_model.invoke({"git_changes": git_changes})
@@ -69 +105,2 @@ def main():
-main()
+if __name__ == "__main__":
+    main()
diff --git a/src/prompts.py b/src/prompts.py
new file mode 100644
index 0000000..c7aeacf
--- /dev/null
+++ b/src/prompts.py
@@ -0,0 +1,91 @@
+prompts = {
+    "python": {
+        "reviewer_start": (
+            "You are a Code reviewer specialized in Python. You need to review the given code "
+            "following PEP8 guidelines and potential bugs and point out issues as bullet list. "
+            "Code:\n {}"
+        ),
+        "coder_start": (
+            "You are a Coder specialized in Python. Improve the given code given the following "
+            "guidelines. Guideline:\n {} \n Code:\n {} \n Output just the improved code and nothing else."
+        ),
+        "rating_start": (
+            "Rate the skills of the coder on a scale of 10 given the Code review cycle with a short reason. "
+            "Code review:\n {} \n"
+        ),
+        "code_comparison": (
+            "Compare the two code snippets and rate on a scale of 10 to both. Don't output the codes. "
+            "Revised Code: \n {} \n Actual Code: \n {}"
+        ),
+        "classify_feedback": (
+            "Are all feedback mentioned resolved in the code? Output just Yes or No. "
+            "Code: \n {} \n Feedback: \n {} \n"
+        ),
+    },
+    "typescript": {
+        "reviewer_start": (
+            "You are a Code reviewer specialized in TypeScript. You need to review the given code following "
+            "best practices and potential bugs and point out issues as bullet list. Code:\n {}"
+        ),
+        "coder_start": (
+            "You are a Coder specialized in TypeScript. Improve the given code given the following "
+            "guidelines. Guideline:\n {} \n Code:\n {} \n Output just the improved code and nothing else."
+        ),
+        "rating_start": (
+            "Rate the skills of the coder on a scale of 10 given the Code review cycle with a short reason. "
+            "Code review:\n {} \n"
+        ),
+        "code_comparison": (
+            "Compare the two code snippets and rate on a scale of 10 to both. Don't output the codes. "
+            "Revised Code: \n {} \n Actual Code: \n {}"
+        ),
+        "classify_feedback": (
+            "Are all feedback mentioned resolved in the code? Output just Yes or No. "
+            "Code: \n {} \n Feedback: \n {} \n"
+        ),
+    },
+    "javascript": {
+        "reviewer_start": (
+            "You are a Code reviewer specialized in JavaScript. You need to review the given code following "
+            "best practices and potential bugs and point out issues as bullet list. Code:\n {}"
+        ),
+        "coder_start": (
+            "You are a Coder specialized in JavaScript. Improve the given code given the following "
+            "guidelines. Guideline:\n {} \n Code:\n {} \n Output just the improved code and nothing else."
+        ),
+        "rating_start": (
+            "Rate the skills of the coder on a scale of 10 given the Code review cycle with a short reason. "
+            "Code review:\n {} \n"
+        ),
+        "code_comparison": (
+            "Compare the two code snippets and rate on a scale of 10 to both. Don't output the codes. "
+            "Revised Code: \n {} \n Actual Code: \n {}"
+        ),
+        "classify_feedback": (
+            "Are all feedback mentioned resolved in the code? Output just Yes or No. "
+            "Code: \n {} \n Feedback: \n {} \n"
+        ),
+    },
+    "cpp": {
+        "reviewer_start": (
+            "You are a Code reviewer specialized in C++. You need to review the given code following "
+            "C++ best practices and potential bugs and point out issues as bullet list. Code:\n {}"
+        ),
+        "coder_start": (
+            "You are a Coder specialized in C++. Improve the given code given the following "
+            "guidelines. Guideline:\n {} \n Code:\n {} \n Output just the improved code and nothing else."
+        ),
+        "rating_start": (
+            "Rate the skills of the coder on a scale of 10 given the Code review cycle with a short reason. "
+            "Code review:\n {} \n"
+        ),
+        "code_comparison": (
+            "Compare the two code snippets and rate on a scale of 10 to both. Don't output the codes. "
+            "Revised Code: \n {} \n Actual Code: \n {}"
+        ),
+        "classify_feedback": (
+            "Are all feedback mentioned resolved in the code? Output just Yes or No. "
+            "Code: \n {} \n Feedback: \n {} \n"
+        ),
+    },
+}
